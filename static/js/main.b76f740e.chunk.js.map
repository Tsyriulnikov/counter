{"version":3,"sources":["Button.module.css","App.module.css","reportWebVitals.ts","Button.tsx","store/counter-reducer.ts","CounterMain.tsx","App.tsx","store/store.ts","index.tsx","CounterMain.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","callBackClick","isDisabled","name","className","s","button","disabled","onClick","initState","count","maxValue","startValue","set","error","setCount","type","payload","setMaxValue","setStartValue","setSet","setError","CounterMain","dispatch","useDispatch","useSelector","state","counterReducer","useEffect","startValueStorage","localStorage","getItem","JSON","parse","countBlock","showStopBlock","showBlock","messageStyle","redValue","showValue","countButtonBlock","App","maxValueStorage","mainBlock","mainContainer","setBlock","inputBlock","inputTextSpan","value","onChange","e","currentTarget","isError","setButtonBlock","setItem","stringify","parseInt","reducers","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b76f740e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3xVnA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"App_mainBlock__2mWfz\",\"mainContainer\":\"App_mainContainer__Td2TM\",\"setBlock\":\"App_setBlock__eOzJz\",\"inputBlock\":\"App_inputBlock__2khYB\",\"setButtonBlock\":\"App_setButtonBlock__R1rEN\",\"inputTextSpan\":\"App_inputTextSpan__m09_a\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport s from \"./Button.module.css\"\r\ntype ButtonPropsType = {\r\n    callBackClick:() => void\r\n    isDisabled:boolean\r\n    name:string\r\n}\r\n\r\nconst Button:React.FC<ButtonPropsType>=({callBackClick, isDisabled,name})=>{\r\n    const onClicIncHendler = () => {\r\n        callBackClick()\r\n    }\r\n    return(\r\n        <button className={s.button}\r\n            disabled={isDisabled}\r\n            onClick={onClicIncHendler}>\r\n            {name}\r\n        </button>\r\n\r\n    )\r\n}\r\nexport default Button;","export type CounterType = {\r\n    count: number\r\n    maxValue: string\r\n    startValue: string\r\n    set: boolean\r\n    error: boolean\r\n}\r\n\r\nconst initState = {\r\n    count: 0,\r\n    maxValue: \"0\",\r\n    startValue: \"0\",\r\n    set: true,\r\n    error: false,\r\n}\r\n\r\n\r\nexport const counterReducer = (state: CounterType = initState, action: CounterActionType): CounterType => {\r\n    switch (action.type) {\r\n        case 'SET_COUNT': {\r\n            return {...state, count: action.payload.count}\r\n        }\r\n        case 'SET_MAX_VALUE': {\r\n            return {...state, maxValue: action.payload.maxValue}\r\n        }\r\n        case 'SET_START_VALUE': {\r\n            return {...state, startValue: action.payload.startValue}\r\n        }\r\n        case 'SET_SET': {\r\n            return {...state, set: action.payload.set}\r\n        }\r\n        case 'SET_ERROR': {\r\n            return {...state, error: action.payload.error}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n// Action creators\r\n\r\ntype CounterActionType = SetCountActionType | MaxValueActionType | StartValueActionType |\r\n    SetActionType | ErrorActionType\r\n\r\n\r\ntype SetCountActionType = ReturnType<typeof setCount>\r\nexport const setCount = (count: number) => {\r\n    return {\r\n        type: \"SET_COUNT\",\r\n        payload: {\r\n            count,\r\n        },\r\n    } as const\r\n}\r\ntype MaxValueActionType = ReturnType<typeof setMaxValue>\r\nexport const setMaxValue = (maxValue: string) => {\r\n    return {\r\n        type: \"SET_MAX_VALUE\",\r\n        payload: {\r\n            maxValue,\r\n        },\r\n    } as const\r\n}\r\ntype StartValueActionType = ReturnType<typeof setStartValue>\r\nexport const setStartValue = (startValue: string) => {\r\n    return {\r\n        type: \"SET_START_VALUE\",\r\n        payload: {\r\n            startValue,\r\n        },\r\n    } as const\r\n}\r\ntype SetActionType = ReturnType<typeof setSet>\r\nexport const setSet = (set: boolean) => {\r\n    return {\r\n        type: \"SET_SET\",\r\n        payload: {\r\n            set,\r\n        },\r\n    } as const\r\n}\r\ntype ErrorActionType = ReturnType<typeof setError>\r\nexport const setError = (error: boolean) => {\r\n    return {\r\n        type: \"SET_ERROR\",\r\n        payload: {\r\n            error,\r\n        },\r\n    } as const\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport s from \"./CounterMain.module.css\";\r\nimport Button from \"./Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CounterType, setCount} from \"./store/counter-reducer\";\r\nimport {AppStoreType} from \"./store/store\";\r\n\r\nconst CounterMain: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const count = useSelector<AppStoreType, CounterType>(state => state.counterReducer)\r\n\r\n    const messegeInputValue: string = \"enter value and press SET\"\r\n    const messegeIncorrect: string = \"incorrect value!\"\r\n//Инициализация счётчика после перезагрузки страницы.Берём значение из localStorage\r\n    useEffect(() => {\r\n        let startValueStorage = localStorage.getItem(\"startValue\");\r\n        if (startValueStorage) dispatch(setCount(JSON.parse(startValueStorage)))\r\n    }, [])\r\n// Увеличиваем значение счётчика.\r\n    const incCount = () => {\r\n        if (count.count < +count.maxValue) {\r\n            dispatch(setCount(count.count + 1))\r\n        }\r\n    }\r\n//Сброс счётчика\r\n    const resetCount = () => {\r\n        dispatch(setCount(+count.startValue))\r\n    }\r\n    return (\r\n        // <div className={count.count === +count.maxValue ? s.mainContainerStop : s.mainContainer}>\r\n        <div className={s.countBlock}>\r\n            <div className={count.count === +count.maxValue ? s.showStopBlock:s.showBlock}>\r\n                {!count.set && !count.error ?\r\n\r\n                    <div className={count.count === +count.maxValue ? s.redValue\r\n                        : s.showValue}>{count.count}</div>\r\n\r\n                    : <div className={s.messageStyle}>{count.error ?\r\n                        messegeIncorrect :\r\n                        messegeInputValue\r\n                    }\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className={s.countButtonBlock}>\r\n                <Button name={\"Inc\"} callBackClick={incCount} isDisabled={count.count === +count.maxValue ||\r\n                    count.set}/>\r\n                <Button name={\"Res\"} callBackClick={resetCount} isDisabled={count.count === +count.startValue ||\r\n                    count.set}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CounterMain;","import React, {ChangeEvent, useEffect} from 'react';\nimport CounterMain from \"./CounterMain\";\n\nimport s from \"./App.module.css\";\nimport Button from \"./Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./store/store\";\nimport {\n    CounterType,\n    setCount,\n    setError,\n    setMaxValue,\n    setSet,\n    setStartValue\n} from \"./store/counter-reducer\";\n\nconst App: React.FC = () => {\n    const dispatch = useDispatch()\n    const count = useSelector<AppStoreType, CounterType>(state => state.counterReducer)\n//Инициализация счётчика после перезагрузки страницы.Берём значение из localStorage\n    useEffect(() => {\n        let maxValueStorage = localStorage.getItem(\"maxValue\");\n        let startValueStorage = localStorage.getItem(\"startValue\");\n        if (maxValueStorage) dispatch(setMaxValue(JSON.parse(maxValueStorage)));\n        if (startValueStorage) {\n            dispatch(setStartValue(JSON.parse(startValueStorage)));\n        }\n        ;\n    }, [])\n//Нажтие на кнопку Set\n    const setCounter = () => {\n        localStorage.setItem('maxValue', JSON.stringify(parseInt(count.maxValue)))\n        localStorage.setItem('startValue', JSON.stringify(parseInt(count.startValue)))\n        dispatch(setSet(false))\n        // При нажатии Set обновляем компоненту + сбрасывем стартовое значение\n        dispatch(setCount(+count.startValue))\n    }\n//Обработка максимального значения\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let value: string = e.currentTarget.value;\n        let isError = (+count.startValue < 0 || +value <= 0 || +count.startValue >= +value);\n        isError ? dispatch(setError(true)) : dispatch(setError(false))\n        dispatch(setSet(true))\n        dispatch(setMaxValue(value));\n    }\n//Обработка стартового значения\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.value;\n        let isError = (+value < 0 || +count.maxValue <= 0 || +value >= +count.maxValue);\n        isError ? dispatch(setError(true)) : dispatch(setError(false))\n        dispatch(setSet(true))\n        dispatch(setStartValue(value))\n    }\n    return (\n        <div className={s.mainBlock}>\n\n            <div className={s.mainContainer}>\n                <div className={s.setBlock}>\n                    <div className={s.inputBlock}>\n                       <span className={s.inputTextSpan}>max value:\n                           <input className={count.error ? s.error : \"\"}\n                                  type={'number'}\n                                  value={count.maxValue}\n                                  onChange={maxValueHandler}/>\n                           </span>\n                        <br/>\n                        <span>start value:\n                           <input className={count.error ? s.error : \"\"}\n                                  type={'number'}\n                                  value={count.startValue}\n                                  onChange={startValueHandler}/>\n                       </span>\n                    </div>\n\n                    <div className={s.setButtonBlock}>\n                        <Button name={\"Set\"} callBackClick={setCounter} isDisabled={!count.set || count.error}/>\n                    </div>\n                </div>\n                <CounterMain/>\n            </div>\n\n        </div>\n    )\n}\nexport default App\n","// import {loadingReducer} from './loadingReducer'\r\nimport {combineReducers, compose, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    counterReducer: counterReducer,\r\n\r\n})\r\n//Для DEVTools  Redux\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n//\r\n\r\nconst store = createStore(reducers, composeEnhancers())\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for dev\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countBlock\":\"CounterMain_countBlock__VVWg1\",\"showBlock\":\"CounterMain_showBlock__33Kdb\",\"countButtonBlock\":\"CounterMain_countButtonBlock__3F6I3\",\"showStopBlock\":\"CounterMain_showStopBlock__5M6_m\",\"redValue\":\"CounterMain_redValue__1pXr0\",\"showValue\":\"CounterMain_showValue__dyKWs\",\"messageStyle\":\"CounterMain_messageStyle__wQuk0\"};"],"sourceRoot":""}